#summary Sychronization Logic

= Synchronization Logic =

The following outlines of OneSync synchronization algorithm and logic.

  * [SyncLogic#1._Overview Overview]
  * [SyncLogic#2._Sync_Preview 2. Sync Preview]
  * [SyncLogic#2._Applying_Patch 2. Applying Patch]
    * [SyncLogic#2.1_Executing_SyncActions 2.1 Executing SyncActions]
    * [SyncLogic#2.2_Updating_of_metadata 2.2 Updating of metadata]
  * [SyncLogic#3._Generating_Patch 3. Generating Patch]
    * [SyncLogic#3.1_Comparing_Metadata 3.1 Comparing Metadata]
    * [SyncLogic#3.2_Creating_SyncActions 3.2 Creating SyncActions]

= 1. Overview =

!FileSyncAgent is the main class executing the synchronization. The code snippet for synchronization is as follows:

{{{
public void Synchronize(SyncPreviewResult preview)
{
    OnStatusChanged(new SyncStatusChangedEventArgs("Applying patch"));
    ApplyPatch(preview);
    SyncEmptyFolders();
    OnStatusChanged(new SyncStatusChangedEventArgs("Generating patch"));
    GeneratePatch();
    OnSyncCompleted(new SyncCompletedEventArgs());
}
}}}

To support Synchronization Preview, the Synchronize method takes in a !SyncPreviewResult as an argument. !SyncPreviewResult is a wrapper for all actions to be executed and may contains skipped actions depending on the user selection during the preview.

As OneSync doesn't view folders as items to be synchronized initially, `SyncEmptyFolders()` was added subsequently to achieve this. Of course, if synchronization of empty folders is not required, the method can be removed without any consequence.

= 2. Sync Preview =

The instance method for !FileSyncAgent to generate the !SyncPreviewResult is as follows:

{{{
public SyncPreviewResult GenerateSyncPreview()
}}}

For each !SyncAction to be executed, the affected file is checked whether it was modified since last sync. This is done by comparing the file with the metadata created during last sync. If it has been changed, the !SyncAction will be considered as a conflict action. The !SyncAction has a Conflict Resolution property/field to determine how this conflict is going to be resolved. It is to be noted that there will be no further filesystem changes made to the sync folder by OneSync after all !SyncActions are executed.

It is during generation of !SyncPreviewResult that conflict actions are detected and filtered out.

Outline of preview generation:
  * `actions = load all SyncActions`
  * `currentItems = generate sync folder metadata`
  * `oldCurrentItems = load previously saved sync folder metadata`
  * `oldOtherItems = load metadata of other PC for comparison`

Sequence diagram for `GenerateSyncPreviewResult()`:

[http://www.comp.nus.edu.sg/~deskoh/devGuide/sd_genPreview.png]


= 1. Applying Patch =

When synchonization starts, OneSync will check if there are any patch to be applied to the current folder being synced. A Patch conceptually refers to !SyncActions to be executed and the (dirty) files that are associated with these !SyncActions.

== 1.1 Executing !SyncActions ==

Each !SyncAction is can be a Copy, Delete or Rename action. 

After the !SyncActions are executed, the !SyncActions and any associated files are deleted from the intermediary storage as they are no longer required.

The following is the sequence diagram for `ApplyPatch()`.

[http://www.comp.nus.edu.sg/~deskoh/devGuide/sd_apply.png]


== 1.2 Updating of metadata =

The metadata of the folder being synchronized will be generated and persisted to the intermediary storage. This metadata can be thought of as the state of the filesystem after the patch from other PC is applied (i.e. after all !SyncActions generated from other PC are executed).

Hence the metadata can be used for comparison by the other PC for detection of the dirty files (i.e. files changed since last synchronization is run).

= 2. Generating Patch =

This is the stage where the !SyncActions for the other folder/PC is being generated.

== 2.1 Comparing Metadata ==

The saved metadata of the other PC is being compared with the current filesystem of the file being synchronized. The purpose is to detect all the differences in the filesystem of the folder being synchronized and the filesystem of the other PC.

== 2.2 Creating !SyncActions ==

For each difference, a corresponding !SyncAction will be generated to resolve this difference. In this stage only files in the current PC could be associated with a !SyncAction. These !SyncActions, together with its associated file (if any) can be considered to be the patch for other PC.