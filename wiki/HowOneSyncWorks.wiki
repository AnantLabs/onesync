#summary Explains how OneSync works

== Introduction ==

OneSync allows 2 folders to be synchronized through an common intermediary storage such as a flashdrive. Therefore, it enables the user to perform synchronization between 2 different PCs. The common intermediary storage is not limited to flashdrive but could be any location accessible from both PCs such as shared folder over LAN and even synchronized DropBox folder.

----

== Lightweight Sync ==

OneSync only stores modified/newly created files on the intermediary storage in order to maximize storage efficiency. Hence it is possible to use a flashdrive that has a smaller capacity than the folder that is being synchronized.

----

== !SyncJob ==

Each PC will be able to create a Sync Job with a user-specifed name. The name of a Sync Job on each PC will be unique. A Sync Job remembers the folder to be synchronized as well as the path to the intermediary storage. Hence it is possible for a folder to belong to more than 1 sync job. After a Sync Job is created, a user just needs to select the job everytime he needs to sync.

----

== !FileSystem Metadata ==

During each synchronization, the filesystem of the folder to be synchronized is being saved to intermediary storage to be used for comparison on the other PC. Information being saved for each files are as follows:

  * Relative file path
  * File Hash
  * Last modified time
  * NTFS ID

All metadata information are stored in the intermediary storage so that it can be accessed by either PC. Refer to [DatabaseSchema Database Schema] for more information about the format of the metadata.

== !SyncSource ==
A !SyncSource refers to a folder that is being synchronized as well as the absolute path of the root folder being synchronized. Each !SyncSource is uniquely identified by a Globally Unique Identifier (GUID).

== Patch ==
After each synchronization, a patch will be created in the intermediary storage. This patch is generated by comparing current filesystem with the filesystem (which is stored as metadata) on the intermediary storage. This patch consists of SyncActions to be taken to make the other folder synchcronized as well as files that needs to be copied. However, a patch is a only a concept that encapsulates the above but is not an actual class in our implementation.

== Sync Algorithm Outline ==
  # Apply any patch stored on intermediary storage.
  # Update file metadata of this PC.
  # Do a comparison to generate differences in !FileSystem.
  # Create a patch on intermediary storage

Refer to [SyncLogic Sync Logic] for more information.