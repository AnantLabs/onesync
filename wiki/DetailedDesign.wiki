#summary High Level Design

= Classes =

  * [DetailedDesign#SyncJob_Related_Classes SyncJob Related Classes]
    * [DetailedDesign#SyncJob SyncJob]
    * [DetailedDesign#SQLiteSyncJobManager SQLiteSyncJobManager]
  * [DetailedDesign#SyncSource_Related_Classes SyncSource Related Classes]
    * [DetailedDesign#SyncSource SyncSource]
    * [DetailedDesign#SQLiteSyncSourceProvider SQLiteSyncSourceProvider]
  * [DetailedDesign#SyncActions_Related_Classes SyncActions Related Classes]
    * [DetailedDesign#SyncAction SyncAction]
    * [DetailedDesign#CreateAction CreateAction]
    * [DetailedDesign#DeleteAction DeleteAction]
    * [DetailedDesign#DeleteAction RenameAction]
  * [DetailedDesign#Metadata_Related_Classes Metadata Related Classes]
    * [DetailedDesign#FileMetadata FileMetadata]
    * [DetailedDesign#FileMetadataItem FileMetadataItem]
    * [DetailedDesign#SQLiteMetadataProvider SQLiteMetadataProvider]
  * [DetailedDesign#IntermediaryStorage IntermediaryStorage]

----

== !SyncJob Related Classes ==

=== !SyncJob ===

Represents information about a synchronization job. It stores information about the folder being synchronized ([DetailedDesign#SyncSource SyncSource]) and the intermediary storage ([DetailedDesign#IntermediaryStorage IntermediaryStorage]). A !SyncJob is uniquely identified by its name on a PC. Internally, it also uses a unique id.

!SyncJobManager is used to manage !SyncJob object. This includes saving and restoring a SyncJob to storage as well as modifying !SyncJob information.

[http://onesync.googlecode.com/svn/wiki/images/syncjob01.png]


=== SQLiteSyncJobManager ===

The SQLiteSyncJobManager inherits from SyncJobManager abstract class. On instantiation, it will check if the database schema is created and creates it if necessary.

[http://onesync.googlecode.com/svn/wiki/images/syncjob02.png]

----

== !SyncSource Related Classes ==

=== !SyncSource ===

Encapsulates information about the folder being synchronized and possibly other information regarding the PC where the folder is. Each !SyncSource has a unique GUID. It should be noted that there can be 2 different !SyncSource object that represents the same folder on a PC. This is to allow a folder to be part of 2 different !SyncJobs.

[http://onesync.googlecode.com/svn/wiki/images/syncsource01.png]

=== SQLiteSyncSourceProvider ===

On instantiation, it will check if the database schema is created and creates it if necessary.

[http://onesync.googlecode.com/svn/wiki/images/syncsource02.png]

----

== !SyncActions Related Classes ==

[http://onesync.googlecode.com/svn/wiki/images/actions.png]

=== !SyncAction ===

An abstract class to represent actions to be taken during synchronization. Each action is associated with at least a file (to be either copied, deleted). Hence, an action contains fields (e.g. file hash) related to the file it is associated with and the id of [DetailedDesign#SyncSource SyncSource] where the file originates from.

=== !CreateAction ===

A !CreateAction represents a file to be copied. This action is generated when a file is modified or created.

=== !DeleteAction ===

A !DeleteAction represents a file to be deleted. This action will be generated if a file that previously exist (by comparing against previously saved metadata) but no longer exist now.

=== !RenameAction ===

A !RenameAction represents a file to be renamed. The `RelativeFilePath` field refers to the filename after rename. Hence, `previousRelativeFilePath` field is required for the rename action to be executed. For information of how rename is detected, refer to [SyncLogic#4.3_Rename_Detection SyncLogic].

----

== !FileMetadata Related Classes ==

[http://onesync.googlecode.com/svn/wiki/images/md.png]

=== !FileMetadata ===

Stores selected information about the file system of a folder to be synchronized. Information includes the root folder, the id of the [DetailedDesign#SyncSource SyncSource] and a list of [DetailedDesign#FileMetadataItem FileMetadataItem].

=== !FileMetadataItem ===

Contains specific information regarding a file like its hash code, relative file path as well as the id of [DetailedDesign#SyncSource SyncSource] it originates from. It should be noted that the absolute root path of a !FileMetadataItem can be obtained by combining it with the rootFolder property of the [DetailedDesign#FileMetadata FileMetadata] it belongs to.

=== SQLiteMetadataProvider ===

SQLiteMetadataProvider inherits from MetadataProvider abstract class to persist FileMetadata to an SQLite database.

----

=== !IntermediaryStorage ===

This class represents information about the intermediary storage used for synchronization, in particular, the file path of the storage, and where the dirty files are kept.

[http://onesync.googlecode.com/svn/wiki/images/is.png]